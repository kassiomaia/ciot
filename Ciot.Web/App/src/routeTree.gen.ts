/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as LoginImport } from "./routes/login";
import { Route as ProtectedImport } from "./routes/_protected";
import { Route as ProtectedIndexImport } from "./routes/_protected.index";
import { Route as ProtectedSignoutImport } from "./routes/_protected.signout";
import { Route as ProtectedDeviceIdImport } from "./routes/_protected.device.$id";

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRoute,
} as any);

const ProtectedRoute = ProtectedImport.update({
  id: "/_protected",
  getParentRoute: () => rootRoute,
} as any);

const ProtectedIndexRoute = ProtectedIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => ProtectedRoute,
} as any);

const ProtectedSignoutRoute = ProtectedSignoutImport.update({
  id: "/signout",
  path: "/signout",
  getParentRoute: () => ProtectedRoute,
} as any);

const ProtectedDeviceIdRoute = ProtectedDeviceIdImport.update({
  id: "/device/$id",
  path: "/device/$id",
  getParentRoute: () => ProtectedRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_protected": {
      id: "/_protected";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof ProtectedImport;
      parentRoute: typeof rootRoute;
    };
    "/login": {
      id: "/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof LoginImport;
      parentRoute: typeof rootRoute;
    };
    "/_protected/signout": {
      id: "/_protected/signout";
      path: "/signout";
      fullPath: "/signout";
      preLoaderRoute: typeof ProtectedSignoutImport;
      parentRoute: typeof ProtectedImport;
    };
    "/_protected/": {
      id: "/_protected/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof ProtectedIndexImport;
      parentRoute: typeof ProtectedImport;
    };
    "/_protected/device/$id": {
      id: "/_protected/device/$id";
      path: "/device/$id";
      fullPath: "/device/$id";
      preLoaderRoute: typeof ProtectedDeviceIdImport;
      parentRoute: typeof ProtectedImport;
    };
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedSignoutRoute: typeof ProtectedSignoutRoute;
  ProtectedIndexRoute: typeof ProtectedIndexRoute;
  ProtectedDeviceIdRoute: typeof ProtectedDeviceIdRoute;
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedSignoutRoute: ProtectedSignoutRoute,
  ProtectedIndexRoute: ProtectedIndexRoute,
  ProtectedDeviceIdRoute: ProtectedDeviceIdRoute,
};

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
);

export interface FileRoutesByFullPath {
  "": typeof ProtectedRouteWithChildren;
  "/login": typeof LoginRoute;
  "/signout": typeof ProtectedSignoutRoute;
  "/": typeof ProtectedIndexRoute;
  "/device/$id": typeof ProtectedDeviceIdRoute;
}

export interface FileRoutesByTo {
  "/login": typeof LoginRoute;
  "/signout": typeof ProtectedSignoutRoute;
  "/": typeof ProtectedIndexRoute;
  "/device/$id": typeof ProtectedDeviceIdRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/_protected": typeof ProtectedRouteWithChildren;
  "/login": typeof LoginRoute;
  "/_protected/signout": typeof ProtectedSignoutRoute;
  "/_protected/": typeof ProtectedIndexRoute;
  "/_protected/device/$id": typeof ProtectedDeviceIdRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "" | "/login" | "/signout" | "/" | "/device/$id";
  fileRoutesByTo: FileRoutesByTo;
  to: "/login" | "/signout" | "/" | "/device/$id";
  id:
    | "__root__"
    | "/_protected"
    | "/login"
    | "/_protected/signout"
    | "/_protected/"
    | "/_protected/device/$id";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren;
  LoginRoute: typeof LoginRoute;
}

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  LoginRoute: LoginRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_protected",
        "/login"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/signout",
        "/_protected/",
        "/_protected/device/$id"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_protected/signout": {
      "filePath": "_protected.signout.tsx",
      "parent": "/_protected"
    },
    "/_protected/": {
      "filePath": "_protected.index.tsx",
      "parent": "/_protected"
    },
    "/_protected/device/$id": {
      "filePath": "_protected.device.$id.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
